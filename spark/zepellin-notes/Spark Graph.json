{"paragraphs":[{"text":"import org.apache.spark._\nimport org.apache.spark.graphx._\nimport org.apache.spark.rdd.RDD\nval vertex1 = Array((3L,(\"Mark\", \"BigData Architect\")), (7L,(\"Koitoer\", \"BigData Scientist\")), (5L,(\"Mauricio\", \"Developer\")), (2L,(\"Mena\", \"MR Developer\")));\nval bigdataMembers:RDD[(VertexId, (String, String))]  = sc.parallelize(vertex1)\nval edges = Array( Edge(3L,7L,\"Peer\"), Edge(5L,3L,\"Team Member\"), Edge(3L, 2L,\"Team Architect\"), Edge(7L,5L,\"Mentor\"));\nval relationships:RDD[Edge[String]] = sc.parallelize(edges);\n\nval defaultUser= (\"David\", \"Work not assigned\");\nval graph = Graph(bigdataMembers, relationships, defaultUser);","dateUpdated":"2017-02-06T09:29:23-0700","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1486426063194_-2034727723","id":"20170206-170743_1227008118","dateCreated":"2017-02-06T05:07:43-0700","dateStarted":"2017-02-06T09:29:23-0700","dateFinished":"2017-02-06T09:29:24-0700","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:735"},{"text":" graph.vertices.filter{case(id, (name, pos)) => pos == \"MR Developer\"}.count\ngraph.edges.filter(e=>e.srcId > e.dstId).count\nval facts : RDD[String] = graph.triplets.map(triplet => triplet.srcAttr._1 + \" is the  \" + triplet.attr + \" of \" + triplet.dstAttr._1 )\nfacts.collect.foreach(println(_))","dateUpdated":"2017-02-06T09:29:23-0700","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1486426432169_-300511189","id":"20170206-171352_1745706349","dateCreated":"2017-02-06T05:13:52-0700","dateStarted":"2017-02-06T09:29:23-0700","dateFinished":"2017-02-06T09:29:26-0700","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:736"},{"title":"Subgraph","text":"val validGraph = graph.subgraph(vpred = (id,attr) => attr._2 != \"Work not yet assigned\")\nvalidGraph.vertices.collect().foreach(println(_))","dateUpdated":"2017-02-06T09:41:39-0700","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","tableHide":false,"title":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1486427287009_1743649327","id":"20170206-172807_184375754","dateCreated":"2017-02-06T05:28:07-0700","dateStarted":"2017-02-06T09:39:26-0700","dateFinished":"2017-02-06T09:39:27-0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:737","errorMessage":""},{"text":"//Neighborhood information\nimport org.apache.spark.graphx.util.GraphGenerators\nimport org.apache.spark.rdd.RDD\nimport org.apache.spark.graphx._\nval graph : Graph[Double, Int] = GraphGenerators.logNormalGraph(sc, numVertices = 100).mapVertices((id,_) => id.toDouble)\nval oldFollowers : VertexRDD[(Int, Double)] = graph.aggregateMessages[(Int, Double)](\n        triplet => { if(triplet.srcAttr > triplet.dstAttr){ triplet.sendToDst(1,triplet.srcAttr)}},\n        (a,b) => (a._1 + b._1 , a._2 + b._2 )\n    )\n\nval avgAgeOfOlderFollower: VertexRDD[Double] = oldFollowers.mapValues((id,value) => value match \n    {\n        case (count,totalAge) => totalAge/count\n    })\n\navgAgeOfOlderFollower.collect.foreach(println(_))","dateUpdated":"2017-02-06T09:46:43-0700","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1486442119261_-375277155","id":"20170206-213519_1795298990","dateCreated":"2017-02-06T09:35:19-0700","dateStarted":"2017-02-06T09:46:43-0700","dateFinished":"2017-02-06T09:46:45-0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:738","errorMessage":""},{"text":"","dateUpdated":"2017-02-06T09:41:39-0700","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1486442439897_-196877903","id":"20170206-214039_1678558660","dateCreated":"2017-02-06T09:40:39-0700","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:739","errorMessage":""}],"name":"Spark Graph","id":"2C8XEZYJG","angularObjects":{"2C8M5ZUP9:shared_process":[],"2C6X1XPW2:shared_process":[],"2C5BM56KU:shared_process":[],"2C71S63FU:shared_process":[],"2C6AFXU2C:shared_process":[],"2C5XSEPC9:shared_process":[],"2C75T3XPF:shared_process":[],"2C8N1PPUZ:shared_process":[],"2C6ABYCK9:shared_process":[],"2C7MAYGQ7:shared_process":[],"2C8FH41ZP:shared_process":[],"2C6SJGDQC:shared_process":[],"2C6J6DSY4:shared_process":[],"2C7EABZN1:shared_process":[],"2C7R8UJ38:shared_process":[],"2C5UNX7GJ:shared_process":[],"2C8XH9MQ6:shared_process":[],"2C6RC675F:shared_process":[]},"config":{"looknfeel":"default"},"info":{}}